ASINCRONIA

setTimeout (() => {
 Se ejecuta algo despues del tiempo que le marco;
}, MILISEGUNDOS)

const interval = setInterval (() => {
 Se ejecuta algo cada tanto tiempo, BUCLE;
	clearInterval(interval); //corto el bucle con la codincion que yo queria
}, MILISEGUNDOS)

------------------------------------------------------

.then 
	TRABAJO CON PROMESAS

await
	async fuction servirCliente (cliente) {

	const orden = await cliente.pideOrden(menu);
	const comida = await cook.prepararComida(orden);

   return cuenta;
}

-si uso funcion flecha el async cambia de lugar
	const sum = async (a,b) => await (a + b)
-----------------------------------------------------

-en PROMESAS
	resolve para que la promesa se resuelva

	reject para determinar que pasa cuando la promesa falla
EJ REJECT:
	const promise = new promise((resolve, reject) => {
		reject(new Error('promesaError))
	})
promise.catch((error) => console.log(error)) //CATCH AGARRA EL ERROR Y LO MUESTRA

----------------------------CODIGO---------------------------

const THREE_SECONDS_IN_MS = 3 * 1000;
let counter = 100; //100 milisegundos
/** Despues dee un tiempo se ejecuta algo 
 * 
 setTimeout(() => {
    console.log("hola dsp de 3 seg")
}, THREE_SECONDS_IN_MS);

console.log("holaaa");
**/

//---------------------------------

 /** Bucle cada 3 segundos, cada 3 segundos (en este caso), se ejectua  
 //meti en una variable el BUCLE.
const threeSecondsInterval = setInterval(() => {
    console.log("hola cada 1 milisegundo")
    counter--; //en cada vuelta disminuye en 1 el intervalo
    if(counter === 0){
        clearInterval(threeSecondsInterval); //metodo para cortar el bucle
    }
}, 100);
**/

//---------------------------------

/** espero que promesa se resuelva y muestro el resultado 
const promise = new Promise ((resolve, reject) => {
    resolve('success!')
}) 

promise.then((result) => console.log(result)) //muestro success porque promesa se resuelve
**/

/** LE MANDO UN ERROR  
const promise = new Promise ((resolve, reject) => {
    reject(new Error('PROMISE-ERROR!'))
}) 

promise.catch((error) => console.log(error)) //USO CATCH, agarra el error y lo muestra.
**/
